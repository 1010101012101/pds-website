from __future__ import print_function
import sys
import socket
import time
from fabric.api import env, cd, run, abort
from fabric.contrib.console import confirm
from secrets import PROD_DIR
import getpass
"""
    Run like so:

        fab deploy admin

        fab deploy production

"""
# config
REPO = 'https://github.com/SETI/pds-website.git'
# branch = 'production'
branch = 'master'

admin_host = 'admin.pds-rings.csc.seti.org'
prod_host = 'server2.pds-rings.seti.org'

admin_repo = '~/pds-website/'  # your local copy of the repo on admin
                                     # this script deploys the website
                                     # generated by this install either
                                     # to admin or to production web roots

prod_staging_dir = '~/website_staging/'  # an rsync target on the production machine
                                         # since you can't rsync directly into
                                         # prod web root from another machine

jekyll_version = '_3.8.3_' # leave blank to go with system default
# /config


PROD_USR = getpass.getuser()  # expects same user name on all machines
                              # = local, admin, prod

env.hosts = [admin_host]  # only admin server has remote logins

prod_login = '{}@{}'.format(PROD_USR, prod_host)
prod_staging_path = '{}@{}:{}'.format(PROD_USR, prod_host, prod_staging_dir)

admin_website = 'https://{}'.format(admin_host)
prod_website = 'https://{}'.format(prod_host)

def deploy():
    """ do some setup things """
    pass  # there are no setup things


def production():
    """ logs into admin server, rsyncs that site to production server
    """
    if confirm("""
            -----

            You will be deploying the website from the admin server
            generated in {}
            to the production website at pds-rings.seti.org.

            During this process you will be prompted for a password, where
            you will need to enter your production server sudo password.

            Do you want to continue?

            """.format(admin_repo, default=False)):

        with cd(admin_repo + "website/"):

            rsync_cmd = "rsync -r {} --exclude=*.tif --exclude=*.tiff --exclude=*.tgz --exclude=*.tar.gz _site/ {}. "

            # move the site over to the production server staging directory
            run(rsync_cmd.format('', prod_staging_path))

            run('ssh -t {} "sudo rsync -r {} {}."'.format(prod_login, prod_staging_dir, PROD_DIR))

            print("\n*** Admin Website Has Been Updated! ***\n Take a look: \n https://pds-rings.seti.org")


def admin():
    """ This script will update the local repo to the latest commit on github,
        build the site in user local directory, then
        deploy the website to admin server web root.
        You must have sudo access to the admin web root.
    """
    # get the latest from github
    with cd(admin_repo):
        run('git checkout {}'.format(branch))
        run('git pull')

    # build the site and then move into web root
    with cd(admin_repo + "website/"):

        run("jekyll {} build --config _config.yml,_config.production.yml".format(jekyll_version))

        # copy the website to the production directory
        rsync_cmd = "sudo rsync -r %s --exclude=*.tif --exclude=*.tiff --exclude=*.tgz --exclude=*.tar.gz _site/ %s. "

        # first do a dry run:
        run(rsync_cmd % ('--dry-run --itemize-changes ',PROD_DIR))
        if confirm("The above was a dry run. If the above looks good, push to admin site:"):
            run(rsync_cmd % ('',PROD_DIR))
            print("\n*** Admin Website Has Been Updated! ***\n Take a look: {}".format(admin_website))
            sys.exit()
        else:
            print("\nDeployment Aborted\n")
